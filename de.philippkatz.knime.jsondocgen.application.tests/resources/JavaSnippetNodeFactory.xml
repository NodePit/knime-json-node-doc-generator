<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="./java_snippet.png" type="Manipulator" xmlns="http://knime.org/node/v3.6"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v3.6 http://knime.org/node/v3.6.xsd">

	<name>Java Snippet</name>
	<shortDescription>Calculates a new columns or flow variables based on
		java code snippets.</shortDescription>
	<fullDescription>
		<intro>
			<p>This node allows you to execute arbitrary java code to create
				new columns or replace existing ones. Enter the java code in
				the text area.
			</p>
			<h3>Output Columns and Variables</h3>
			<p> Output columns are defined by creating and binding a java field
				for each column. The value assigned to this field will be written
				to the output.
			</p>
			<p> This node allows adding or modifying flow variables in the same
				manner.
			</p>
			<h3>Additional libraries</h3>
			<p>It is also possible to use external java libraries (libraries that are
				not part of java boot classpath). In order to include external jar or
				zip files, add their location in the "Additional Libraries" tab.
			</p>
			<p>Advanced users may want to make use of a library that is already present
				in the KNIME Analytics Platform installation as a bundle.
				Adding them to the list in the "Additional Bundles" tab will make them
				available to the java snippet's classpath.
			</p>
			<h3>Templates</h3>
			<p>You can define reusable templates with the "Create templates..."
				button. Templates are stored in the user's workspace by default
				and can be accessed via the "Templates" tab.
			</p>
		</intro>
		<tab name="Java Snippet">
			<description>
				Contains the Java code editor to edit the snippet.
			</description>
			<option name="Column List">
				This list contains the columns that are available in the input table.
				Double click any of the entries to insert a respective field
				in the code editor and insert the field name at the current cursor
				position (replacing the selection, if any).
			</option>
			<option name="Flow Variable List">
				This list contains the flow variables that are currently available at
				the node input.
				Double click any of the entries to insert a respective field
				in the code editor and insert the field name at the current cursor
				position (replacing the selection, if any).
			</option>
			<option name="Snippet text area">
				<p>
				Enter your java code here. You can access input columns or flow
				variables by defining them in the <b>"Input"</b> table of the dialog.
				Alternatively use the methods <i>getCell(name, type)</i> or
				<i>getFlowVariable(name, type)</i> where <i>name</i> is the name of
				the input column or the flow variable.
				You can use the following values for the <i>type</i> parameter.
				<ul>
					<li><i>tString</i> : String (f)</li>
					<li><i>tInt</i> : Integer (f)</li>
					<li><i>tDouble</i> : Double (f)</li>
					<li><i>tLong</i> : Long</li>
					<li><i>tBoolean</i> : Boolean</li>
					<li><i>tDate</i> : java.util.Date</li>
					<li><i>tCalendar</i> : java.util.Calendar</li>
					<li><i>tXML</i> : org.w3c.document</li>
				</ul>

				(f) These Types can be used for flow variables.
				</p>

				<p>
					<b>Java Snippet Code</b>
				</p>
				<p>For columns:</p>
				<ul>
					<li><i>getCell(name, type)*</i> : Get value of a cell by column name</li>
					<li><i>isType(name, type)*</i> : Test for type by column name</li>
					<li><i>isMissing(name)*</i> : Check if missing by column name</li>
					<li><i>columnExists(name)*</i> : Check if column with given name exists</li>
					<li><i>getColumnCount(index, type)</i> : Number of columns in the input table</li>
					<li><i>getColumnName(index)</i> : Retrieve column name at index</li>
				</ul>
				<p>For flow variables:</p>
				<ul>
					<li><i>getFlowVariable(name, type)</i> : Get value of a flow variable by name</li>
					<li><i>getFlowVariables(type)</i> : Get all flow variables by type. A name to value map is returned.</li>
					<li><i>flowVariableExists(name)</i> : Check if a flow variable with given name exists</li>
					<li><i>isFlowVariableOfType(name, type)</i> : Check if a flow variable is of type</li>
				</ul>

				<p>
				* For these methods there is a variant that takes the column
				index instead of its name.
				</p>

				<p>Note that the snippet allows defining custom global variables and imports. </p>

				<p>
					Exceptions in the snippet are caught by the framework and will
					result in missing values for all output columns of the row being
					processedâ€”unless there are flow variables defined by the
					snippet (in which case the execution will always fail).
					You can force the node to fail execution by throwing an exception
					of class <tt>Abort</tt>.
				</p>

				<p><b>Code Assistance</b></p>
				<p>
					<i>CTRL+SPACE</i> for auto completion will popup a list with
					all classes, methods and fields available at your current
					cursor location.
				</p>
				<p>
					<i>ENTER</i> will generate missing import statements for a
					selected class.
				</p>
			</option>
			<option name="Input">
				Define input fields for the snippet here. Every field will be populated
				with the data of the associated input column or flow variable
				during execution.
				For missing values in the input the field is set to <tt>null</tt>.
			</option>
			<option name="Output">
				Define output columns and flow variables here. Every row in the
				<b>Output</b> table defines a java field bound to an output column
				or flow variable. Values assigned to this field in the snippet will
				show up at the output.
			</option>
		</tab>
		<tab name="Additional Libraries">
			<description>
				This tab allows adding custom java library archives to make them
				available on the classpath of the java snippet.
			</description>
			<option name="Library List">
				List of libraries that will be present in the snippets classpath.
				Use the buttons below to add or remove libraries.
			</option>
			<option name="Add File(s)...">
				Add a .jar or .zip file from your system.
			</option>
			<option name="Add KNIME URL...">
				Add a KNIME protocol url to a .jar or .zip file. E.g.
				"knime://knime.workflow/example.jar".
			</option>
		</tab>
		<tab name="Additional Bundles">
			<description>
				This tab allows making installed bundles available on the
				classpath of the java snippet, allowing you to use classes e.g.
				from org.apache.commons, org.json, com.google.guava and more.<br/>

				Once a bundle has been added, its version will be saved with the
				settings. Should the bundle not be present on an installation
				the workflow is then opened with, the node will produce an error
				and not run.<br/>

				Should the bundle be present but in another version, it will suffice
				as long as the major version did not change and the minor version
				is larger or equal to the version the workflow was saved with
				("semantic versioning").
			</description>
			<option name="Active Bundles">
				Bundles that have been manually added to the classpath of the
				snippet.
				Double click to remove bundles or use <i>DEL</i> or the
				"Remove Selected Bundles" button to remove a range of bundles.
			</option>
			<option name="Custom Type Bundles">
				Bundles implicitly required by fields created for inputs and outputs.
				To make a bundle requirement explicit, double click to add it to
				"Active Bundles".
			</option>
			<option name="Available Bundles List">
				List of bundles available in the current KNIME Analytics Platform
				installation. Filter through the list using the field above and
				either double click, hit <i>ENTER</i> or use the "Add Selected Bundles"
				to add bundles to "Active Bundles".
			</option>
		</tab>
	</fullDescription>
	<ports>
		<inPort name="An input table" index="0">
			Input table.
		</inPort>
		<outPort name="Appended table" index="0">
			Input table with additional or replaced columns.
		</outPort>
	</ports>
</knimeNode>
